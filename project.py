# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hU7SlLP38aCXAPlsFlXXANO9H0sgXevX
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Always use low_memory=False to avoid dtype warnings
df = pd.read_csv("compressed_data.csv", low_memory=False)

# ✅ Rename columns for easier access (remove spaces, lowercase)
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# ✅ Show column names again to confirm
print(df.columns)

# ✅ Clean price column: remove $ and , and convert to float
df['price'] = df['price'].replace('[\$,]', '', regex=True).astype(float)

# ✅ Convert last_review to datetime
df['last_review'] = pd.to_datetime(df['last_review'], errors='coerce')

# ✅ Drop rows with missing key info
df_cleaned = df.dropna(subset=['price', 'neighbourhood', 'room_type', 'number_of_reviews'])

# ✅ Check cleaned data
df_cleaned.info()
df_cleaned.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Set plot style
sns.set(style='whitegrid')

# 1. Price distribution
plt.figure(figsize=(10, 5))
sns.histplot(df_cleaned['price'], bins=50, kde=True)
plt.title('Price Distribution')
plt.xlabel('Price ($)')
plt.ylabel('Number of Listings')
plt.xlim(0, 1000)  # Limit to filter out extreme outliers
plt.show()

# 2. Average price by room type
plt.figure(figsize=(8, 5))
sns.barplot(x='room_type', y='price', data=df_cleaned)
plt.title('Average Price by Room Type')
plt.ylabel('Average Price ($)')
plt.show()

# 3. Price vs number of reviews
plt.figure(figsize=(10, 6))
sns.scatterplot(x='number_of_reviews', y='price', data=df_cleaned, alpha=0.3)
plt.title('Price vs Number of Reviews')
plt.xlabel('Number of Reviews')
plt.ylabel('Price ($)')
plt.xlim(0, 300)
plt.ylim(0, 1000)
plt.show()

# 4. Price by neighbourhood (top 10 neighbourhoods by listing count)
top_neigh = df_cleaned['neighbourhood'].value_counts().head(10).index
plt.figure(figsize=(12, 6))
sns.boxplot(x='neighbourhood', y='price', data=df_cleaned[df_cleaned['neighbourhood'].isin(top_neigh)])
plt.xticks(rotation=45)
plt.title('Price by Top 10 Neighbourhoods')
plt.ylabel('Price ($)')
plt.ylim(0, 1000)
plt.show()

# We'll use a copy of the cleaned data
data = df_cleaned.copy()

# Select important features
features = ['room_type', 'neighbourhood_group', 'number_of_reviews', 'availability_365']

# Drop rows with missing values in these columns
data = data[features + ['price']].dropna()

data.head()

# Convert room_type and neighbourhood_group to dummy variables
data_encoded = pd.get_dummies(data, columns=['room_type', 'neighbourhood_group'], drop_first=True)

data_encoded.head()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# Separate features (X) and price (y)
X = data_encoded.drop('price', axis=1)
y = data_encoded['price']

# Split into 80% train and 20% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error (MAE):", round(mae, 2))
print("R-squared (R²):", round(r2, 2))

# Reuse model and features
data['predicted_price'] = model.predict(data_encoded.drop('price', axis=1))
data.reset_index(drop=True, inplace=True)

# Save to a CSV file (downloads in Colab Files)
data.to_csv("airbnb_price_prediction.csv", index=False)

# Save the cleaned dataset as a CSV file
df_cleaned.to_csv("cleaned_airbnb_data.csv", index=False)



from google.colab import files
files.download("cleaned_airbnb_data.csv")

# One-hot encode categorical variables
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression

# Prepare data again if needed
features = ['room_type', 'neighbourhood_group', 'number_of_reviews', 'availability_365']
df_model = df_cleaned.dropna(subset=features + ['price'])

# Convert price column to float
df_model['price'] = df_model['price'].replace('[\$,]', '', regex=True).astype(float)

# One-hot encoding for categorical columns
df_encoded = pd.get_dummies(df_model[features], drop_first=True)

# Train model
model = LinearRegression()
model.fit(df_encoded, df_model['price'])

# Predict
df_model['predicted_price'] = model.predict(df_encoded)

# Save as CSV
df_model.to_csv("airbnb_with_predictions.csv", index=False)

# Download
from google.colab import files
files.download("airbnb_with_predictions.csv")

# Fix capitalization and typos in neighbourhood group
df_cleaned['neighbourhood_group'] = df_cleaned['neighbourhood_group'].str.strip().str.title()

# Example manual corrections (if needed)
df_cleaned['neighbourhood_group'] = df_cleaned['neighbourhood_group'].replace({
    'Brookln': 'Brooklyn',
    'Manhatan': 'Manhattan'
})

# Re-export cleaned dataset with fixed 'neighbourhood_group'
df_cleaned.to_csv("cleaned_airbnb_data.csv", index=False)
from google.colab import files
files.download("cleaned_airbnb_data.csv")